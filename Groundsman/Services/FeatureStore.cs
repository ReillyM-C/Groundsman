using Groundsman.Interfaces;
using Groundsman.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using Xamarin.Essentials;
using Xamarin.Forms;
using Point = Groundsman.Models.Point;

namespace Groundsman.Services
{
    public class FeatureStore : IDataStore<Feature>
    {

        public ObservableCollection<Feature> features;

        public FeatureStore()
        {
            features = new ObservableCollection<Feature>();
        }

        public async Task<bool> AddItemAsync(Feature item)
        {
            //IMPORT CHECKING
            bool parseResult = TryParseFeature(item);
            if (parseResult)
            {
                //EnsureUniqueID(importedFeature);
                features.Add(item);
                var save = SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);
            }
            return parseResult;
        }

        public async Task<bool> DeleteItemAsync(Feature item)
        {
            bool deleteSuccessful = features.Remove(item);
            var save = SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);
            return save;
        }

        public async Task<bool> DeleteItemsAsync()
        {
            features.Clear();
            int successful = await ImportFeaturesAsync(GetTemplateFile(), false);
            var save = SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);
            return save;
        }

        public Task<Feature> GetItemAsync(string id)
        {
            throw new NotImplementedException();
        }

        public async Task<ObservableCollection<Feature>> GetItemsAsync(bool forceRefresh = false)
        {
            if (forceRefresh)
            {
                features.Clear();
                int successful = await ImportFeaturesAsync(GetFeaturesFile(), false);
            }
            return features;
        }

        public async Task<bool> UpdateItemAsync(Feature item)
        {
            for (int i = 0; i < features.Count; i++)
            {
                if (features[i].properties.id == item.properties.id)
                {
                    features[i] = item;
                    return true;
                }
            }
            var save = SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);
            //notify cant find feature (or insert as new feature)
            return false;
        }

        private string GetFeaturesFile()
        {
            if (File.Exists(AppConstants.FEATURES_FILE))
            {
                string text = File.ReadAllText(AppConstants.FEATURES_FILE);
                return text;
            }
            else
            {
                return GetTemplateFile();
            }
        }

        private string GetTemplateFile()
        {
            var assembly = IntrospectionExtensions.GetTypeInfo(GetType()).Assembly;
            Stream stream = assembly.GetManifestResourceStream("Groundsman.locationsAutoGenerated.json");
            string text = "";
            using (var reader = new StreamReader(stream))
            {
                text = reader.ReadToEnd();
            }
            return text;
        }

        //handle notifying errors and success counts where method called from
        public async Task<int> ImportFeaturesAsync(string importContents, bool notify)
        {
            int successfulImport = 0;
            int failedImport = 0;
            try
            {
                GeoJSONObject importedFeaturesData = JsonConvert.DeserializeObject<GeoJSONObject>(importContents);
                if (importedFeaturesData != null)
                {
                    foreach (Feature importedFeature in importedFeaturesData.features)
                    {
                        if (await AddItemAsync(importedFeature))
                        {
                            successfulImport++;
                        }
                        else
                        {
                            failedImport++;
                        }
                    }
                }
                MessagingCenter.Send(this, "Hi");
                if (notify)
                {
                    if (failedImport == 0)
                    {
                        await Application.Current.MainPage.DisplayAlert("Import Complete", $"Groundsman imported {successfulImport} new features.", "Ok");
                    }
                    else
                    {
                        await Application.Current.MainPage.DisplayAlert("Import Complete", $"Groundsman imported {successfulImport} new features. {failedImport} features failed to import", "Ok");
                    }
                }
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Import Error", $"Groundsman can only import valid GeoJSON. Error: {ex.Message}", "Ok");
            }
            return successfulImport;
        }

        private static bool TryParseFeature(Feature feature)
        {
            //if feature is freshly created, no need to parse
            if (feature.properties.id == AppConstants.NEW_ENTRY_ID)
            {
                feature.properties.id = Guid.NewGuid().ToString();
                return true;
            }

            //Importing a feature validation

            // Ensure the feature has valid GeoJSON fields supplied.
            if (feature != null && feature.type != null && feature.geometry != null && feature.geometry.coordinates != null)
            {
                feature.properties.xamarincoordinates = new List<Point>();
                object[] trueCoords;

                // Determine if feature is supported and if so convert its points
                switch (feature.geometry.type)
                {
                    case FeatureType.Point:
                        trueCoords = feature.geometry.coordinates.ToArray();
                        feature.properties.xamarincoordinates.Add(JsonCoordToXamarinPoint(trueCoords));
                        break;
                    case FeatureType.LineString:
                        // Iterates the root coordinates (List<object>),
                        // then casts each element in the list to a Jarray which contain the actual coordinates.
                        for (int i = 0; i < feature.geometry.coordinates.Count; i++)
                        {
                            trueCoords = ((JArray)feature.geometry.coordinates[i]).ToObject<object[]>();
                            feature.properties.xamarincoordinates.Add(JsonCoordToXamarinPoint(trueCoords));
                        }
                        break;
                    case FeatureType.Polygon:
                        // Iterates the root coordinates (List<object>), and casts each element in the list to a Jarray, 
                        // then casts each Jarray's element to another Jarray which contain the actual coordinates.
                        for (int i = 0; i < feature.geometry.coordinates.Count; i++)
                        {
                            for (int j = 0, n = ((JArray)feature.geometry.coordinates[i]).Count; j < n; j++)
                            {
                                trueCoords = ((JArray)(((JArray)feature.geometry.coordinates[i])[j])).ToObject<object[]>();
                                feature.properties.xamarincoordinates.Add(JsonCoordToXamarinPoint(trueCoords));
                            }
                        }
                        break;
                    default:
                        return false;
                }

                // Generate new import id
                feature.properties.id = Guid.NewGuid().ToString();

                // If author ID hasn't been set on the feature, default it to the user's ID.
                if (string.IsNullOrWhiteSpace(feature.properties.author))
                {
                    feature.properties.author = Preferences.Get("UserID", "Groundsman");
                } else if (feature.properties.author.Length > 30)
                {
                    feature.properties.author = feature.properties.author.Substring(0, 30);
                }

                // Add default name if empty
                if (string.IsNullOrWhiteSpace(feature.properties.name))
                {
                    feature.properties.name = "Unnamed " + feature.geometry.type;
                } else if (feature.properties.name.Length > 30)
                {
                    feature.properties.name = feature.properties.name.Substring(0, 30);
                }

                if (!string.IsNullOrWhiteSpace(feature.properties.metadataStringValue) && feature.properties.metadataStringValue.Length > 100)
                {
                    feature.properties.name = feature.properties.name.Substring(0, 100);
                }

                // If the date field is missing or invalid, convert it into DateTime.Now.
                if (feature.properties.date == null || DateTime.TryParse(feature.properties.date, out _) == false)
                {
                    feature.properties.date = DateTime.Now.ToShortDateString();
                }
                return true;
            }
            return false;
        }

        private static Point JsonCoordToXamarinPoint(object[] coords)
        {
            double longitude = (double)coords[0];
            double latitude = (double)coords[1];
            double altitude = (coords.Length == 3) ? (double)coords[2] : 0.0;

            Point point = new Point(latitude, longitude, altitude);
            return point;
        }

        public bool SaveFeaturesToFile(ObservableCollection<Feature> features, string FileName)
        {
            GeoJSONObject geoJSONObject = new GeoJSONObject
            {
                type = "FeatureCollection",
                features = features
            };
            var json = JsonConvert.SerializeObject(geoJSONObject);
            File.WriteAllText(FileName, json);
            return true;
        }

        public async Task<bool> ExportFeatures(ObservableCollection<Feature> features)
        {
            SaveFeaturesToFile(features, AppConstants.FEATURES_EXPORT_FILE);

            await Share.RequestAsync(new ShareFileRequest
            {
                Title = "Features Export",
                File = new ShareFile(AppConstants.FEATURES_EXPORT_FILE, "text/plain"),
                PresentationSourceBounds = DeviceInfo.Platform == DevicePlatform.iOS && DeviceInfo.Idiom == DeviceIdiom.Tablet
                        ? new System.Drawing.Rectangle((int)(DeviceDisplay.MainDisplayInfo.Width * .474), 80, 0, 0)
                        : System.Drawing.Rectangle.Empty
            });

            return true;
        }
    }
}
