using Groundsman.Interfaces;
using Groundsman.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using Xamarin.Essentials;
using Xamarin.Forms;
using Position = Groundsman.Models.Position;

namespace Groundsman.Services
{
    public class FeatureStore : IDataStore<Feature>
    {

        public ObservableCollection<Feature> features;

        public FeatureStore()
        {
            features = new ObservableCollection<Feature>();
        }

        public async Task<bool> AddItemAsync(Feature item)
        {
            //IMPORT CHECKING
            bool parseResult = TryParseFeature(item);
            if (parseResult)
            {
                //EnsureUniqueID(importedFeature);
                features.Add(item);
                var save = SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);
            }
            return parseResult;
        }

        public async Task<bool> DeleteItemAsync(Feature item)
        {
            bool deleteSuccessful = features.Remove(item);
            var save = SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);
            return save;
        }

        public async Task<bool> DeleteItemsAsync()
        {
            features.Clear();
            int successful = await ImportFeaturesAsync(GetTemplateFile(), false);
            var save = SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);
            return save;
        }

        public Task<Feature> GetItemAsync(string id)
        {
            throw new NotImplementedException();
        }

        public async Task<ObservableCollection<Feature>> GetItemsAsync(bool forceRefresh = false)
        {
            if (forceRefresh)
            {
                features.Clear();
                int successful = await ImportFeaturesAsync(GetFeaturesFile(), false);
            }
            return features;
        }

        public async Task<bool> UpdateItemAsync(Feature item)
        {
            //bool parseResult = TryParseFeature(item); SHOULD be implemented infuture for final verification once JSON importing is split from general verification
            for (int i = 0; i < features.Count; i++)
            {
                if (features[i].Properties["id"] == item.Properties["id"])
                {
                    features[i] = item;
                }

            }
            return SaveFeaturesToFile(features, AppConstants.FEATURES_FILE);

        }

        private string GetFeaturesFile()
        {
            if (File.Exists(AppConstants.FEATURES_FILE))
            {
                string text = File.ReadAllText(AppConstants.FEATURES_FILE);
                return text;
            }
            else
            {
                return GetTemplateFile();
            }
        }

        private string GetTemplateFile()
        {
            var assembly = IntrospectionExtensions.GetTypeInfo(GetType()).Assembly;
            Stream stream = assembly.GetManifestResourceStream("Groundsman.locationsAutoGenerated.json");
            string text = "";
            using (var reader = new StreamReader(stream))
            {
                text = reader.ReadToEnd();
            }
            return text;
        }

        //handle notifying errors and success counts where method called from
        public async Task<int> ImportFeaturesAsync(string importContents, bool notify)
        {
            int successfulImport = 0;
            int failedImport = 0;
            try
            {
                FeatureCollection importedFeaturesData = JsonConvert.DeserializeObject<FeatureCollection>(importContents);
                if (importedFeaturesData != null)
                {
                    List<Feature> featurelist = new List<Feature>();
                    foreach (Feature importedFeature in importedFeaturesData.Features)
                    {
                        if (await AddItemAsync(importedFeature))
                        {
                            successfulImport++;
                        }
                        else
                        {
                            failedImport++;
                        }
                    }
                }
                MessagingCenter.Send(this, "Hi");
                if (notify)
                {
                    if (failedImport == 0)
                    {
                        await Application.Current.MainPage.DisplayAlert("Import Complete", $"Groundsman imported {successfulImport} new features.", "Ok");
                    }
                    else
                    {
                        await Application.Current.MainPage.DisplayAlert("Import Complete", $"Groundsman imported {successfulImport} new features. {failedImport} features failed to import", "Ok");
                    }
                }
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Import Error", $"Groundsman can only import valid GeoJSON. Error: {ex.Message}", "Ok");
            }
            return successfulImport;
        }

        private static bool TryParseFeature(Feature feature)
        {
            //if feature is freshly created, no need to parse
            if (!feature.Properties.ContainsKey("id"))
            {
                feature.Properties.Add("id", Guid.NewGuid().ToString());
            }
            else if ((string)feature.Properties["id"] == AppConstants.NEW_ENTRY_ID) //Until parsing is properly modular - brand new features are not checked again below
            {
                feature.Properties["id"] = Guid.NewGuid().ToString();
                return true;
            }


            // If author ID hasn't been set on the feature, default it to the user's ID.
            string author = Preferences.Get("UserID", "Groundsman");
            if (feature.Properties.ContainsKey("author"))
            {
                author = (string)feature.Properties["author"];
                if (author.Length > 30)
                {
                    author = author.Substring(0, 30);
                    feature.Properties["author"] = author;
                }
            }
            else
            {
                feature.Properties.Add("author", author);
            }

            // Add default name if empty
            string name = "Unnamed " + feature.Geometry.Type;
            if (feature.Properties.ContainsKey("name"))
            {
                name = (string)feature.Properties["name"];
                if (name.Length > 30)
                {
                    name = name.Substring(0, 30);
                    foreach (char c in Path.GetInvalidFileNameChars())
                    {
                        name = name.Replace(c, '-');
                    }
                    feature.Properties["name"] = name;
                }
            }
            else
            {
                feature.Properties.Add("name", name);
            }

            //TODO: add checks for int and float value - also update string value check
            //if (!string.IsNullOrWhiteSpace(feature.Properties.metadataStringValue) && feature.Properties.metadataStringValue.Length > 100)
            //{
            //    feature.Properties.name = feature.Properties.name.Substring(0, 100);
            //}

            // If the date field is missing or invalid, convert it into DateTime.Now.
            string date = DateTime.Now.ToShortDateString();
            if (feature.Properties.ContainsKey("date"))
            {
                if (DateTime.TryParse((string)feature.Properties["date"], out _) == false)
                {
                    feature.Properties.Add("date", date);
                }

            }
            else
            {
                feature.Properties.Add("date", date);
            }
            return true;
        }

        public bool SaveFeaturesToFile(IList<Feature> features, string FileName)
        {
            FeatureCollection geoJSONObject = new FeatureCollection(features);

            var json = JsonConvert.SerializeObject(geoJSONObject);
            File.WriteAllText(FileName, json);
            return true;
        }

        public async Task<bool> ExportFeatures(IList<Feature> features)
        {
            string fileName = features.Count > 1 ? "Groundsman Feature List" : (string)features[0].Properties["name"];

            SaveFeaturesToFile(features, AppConstants.GetExportFile(fileName));

            await Share.RequestAsync(new ShareFileRequest
            {
                Title = "Features Export",
                File = new ShareFile(AppConstants.GetExportFile(fileName), "text/plain"),
                PresentationSourceBounds = DeviceInfo.Platform == DevicePlatform.iOS && DeviceInfo.Idiom == DeviceIdiom.Tablet
                        ? new System.Drawing.Rectangle((int)(DeviceDisplay.MainDisplayInfo.Width * .474), 80, 0, 0)
                        : System.Drawing.Rectangle.Empty
            });

            return true;
        }
    }
}
